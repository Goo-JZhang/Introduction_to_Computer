#include <iostream>
bool analysis(int i, int* Bopp, int* Boop, char opp_history[20][25], char oop_history[20][25]);
bool isImitator(char a[], char b[], int* p1, int* p2);
FILE* stream1, * stream2, * stream3;
//pisImi为对手每轮是否表现为复读机（-1为无数据，1为是复读机，0为复读机）
//psocisImi为社会（对手的对手）是否表现为复读机（-1为无数据，1为是复读机，0为复读机）
//pnumImi为对手每轮复读机的相位差（复读多少次之前的）
//psocnumImi为对手的对手每轮复读机的相位差（复读多少次之前的）
//*pBaveopp为对手平均每轮使用betrayal的次数
//Bopp为对手每轮使用betrayal的次数
//Boop为对手的对手每轮使用betrayal的次数
void analy(char opp_history[20][25],char oop_history[20][25], int pisImi[],int psocisImi[], int pnumImi[],int psocnumImi[],int* pBaveopp,int Bopp[],int Boop[])
{
	int ave = 0;
	int i = 0, j = 0;
	int isImi=-1;
	int numImi = 0;
	for (i = 0; i <= 19; i++)
	{
		isImi = -1;
		numImi = 0;
		bool flag=isImitator(opp_history[i], oop_history[i], &isImi, &numImi);
		pisImi[i] = isImi;
		pnumImi[i] = numImi;
		isImi = -1;
		numImi = 0;
		flag=isImitator(oop_history[i], opp_history[i], &isImi, &numImi);
		psocisImi[i] = isImi;
		psocnumImi[i] = numImi;
	}
	int turn = 20;
	for (i = 0; i <= 19; i++)
	{
		bool flag = analysis(i, &Bopp[i], &Boop[i],opp_history,oop_history);
		if (flag == false)
		{
			Bopp[i] = -1;
			Boop[i] = -1;
			turn--;
		}
		else NULL;
	}
	for (i = 0; i <= 19; i++)
	{
		ave = ave + Bopp[i];
	}
	*pBaveopp = ave / turn;
}
bool isImitator(char a[], char b[], int* p1, int* p2)//a是imi
{
	int i = 1, j = 0, count = 0,maxcount = 0;
	if (a[0] == 'm')
	{
		*p1 = -1;
		*p2 = -1;
		return false;
	}
	for (i = 1; i <= 4; i++)
	{
		count = 0;
		for (j = i; j <= 24; j++)
		{
			if (a[j] == b[j - i])
			{
				count++;
			}
		}
		if (count >= maxcount&&count>=18)
		{
			*p1 = 1;
			*p2 = i;
			maxcount = count;
		}
		else
		{
			*p1 = 0;
		}
		printf("%d\n", count);
	}
	return true;
}
bool analysis(int i,int* Bopp,int* Boop, char opp_history[20][25], char oop_history[20][25])
{
	int j = 0;
	if (opp_history[i][0] == 'm')
	{
		return false;
	}
	for (j = 0; j <= 24; j++)
	{
		if (opp_history[i][j] == 'b')
		{
			(*Bopp)++;
		}
		if (oop_history[i][j] == 'b')
		{
			(*Boop)++;
		}
	}
	return true;
}